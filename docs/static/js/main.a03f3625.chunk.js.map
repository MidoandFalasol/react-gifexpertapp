{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAY,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cAEvB,EAAmCC,mBAAS,KAA5C,mBAAQC,EAAR,KAAoBC,EAApB,KAsBA,OAEI,sBAAMC,SAfS,SAACC,GAEhBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAkBO,OACpCN,EAAc,MAQlB,SAEA,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAtBlB,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,a,+BCVlBG,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DACXC,EADW,gDACkCC,UAAUH,GAD5C,+DAECI,MAAMF,GAFP,cAEXG,EAFW,gBAGGA,EAAKC,OAHR,uBAGVC,EAHU,EAGVA,KAEDC,EAAKD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACrB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATxB,kBAYXM,GAZW,4CAAD,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,0CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECLsB,SAACA,GACvB,MAAuBd,mBAAS,CAC5BqB,KAAK,GACLa,SAAS,IAFb,mBAAMC,EAAN,KAAaC,EAAb,KAyBA,OApBAC,qBAAU,WACPxB,EAAQC,GAAUwB,MAAK,SAAAC,GAElBH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAKjB,CAACpB,IAUGqB,EDrBsBK,CAAa1B,GAA9Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAMnB,OAEI,qCACA,6BAAMpB,IACLoB,GAAU,mBAAGJ,UAAU,mCAAb,qBAEX,qBAAKA,UAAU,YAAf,SAIYH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEvBpBgB,EAAe,WAIxB,MAAmCzC,mBAAS,CAAC,sBAA7C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAiBA,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGD,6BAES2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MC/BlC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a03f3625.chunk.js","sourcesContent":["import React,  { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory=({setCategories})=>{\r\n\r\n    const [ inputValue, setInputValue]=useState(' ');\r\n    // se crea una constante nueva para poder mostrar el nuevo valor agregado al escribir \r\n    // en el input \r\n\r\n    const handleInputChange=(e)=>{\r\n        setInputValue(e.target.value);\r\n\r\n    }\r\n\r\n    const handleSubmit=(e)=>{\r\n        // preever el refresh por defecto del formulario\r\n        e.preventDefault();\r\n\r\n        // validación en el submit\r\n        if(inputValue.trim().length>2){\r\n            setCategories(cats=>[inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n        // console.log('Submit Hecho')\r\n\r\n        \r\n    }\r\n    return(\r\n       \r\n        <form onSubmit={handleSubmit}>\r\n            {/* el formulario es el acomulador */}\r\n        <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs=async(category)=>{\r\n    const url=`http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=4MTJ6mQ8s1e3xESJdd6dEuBJtjR1zmlJ`\r\n    const resp= await fetch(url);\r\n    const {data}= await resp.json();\r\n\r\n    const gifs=data.map(img=>{\r\n        return{\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n   return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    // console.log({id, title, url});\r\n    return (\r\n        <div className=\"card animate__animated animate__flipInY\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n    \r\n}\r\n","// GrifGrid sera una colección de todos los elementos a conseguir de la categoria\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n    const {data:images,loading}= useFetchGifs(category);\r\n    \r\n    \r\n    \r\n\r\n\r\n    return (\r\n        \r\n        <>\r\n        <h3>{ category}</h3>\r\n        {loading&& <p className='animate__animated animate__flash'>Loading</p>}\r\n        {/* {loading?'cargando...':'fin de carga'} */}\r\n        <div className='card-grid'>\r\n           \r\n            \r\n                {\r\n                    images.map(img =>(\r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        {...img}/>\r\n                    ))\r\n                }\r\n\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs=(category)=>{ \r\n    const[state, setState]=useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n       getGifs(category).then(imgs=>{\r\n           \r\n            setState({\r\n                data:imgs,\r\n                loading:false\r\n            });\r\n          \r\n       });\r\n        \r\n    }, [category])\r\n\r\n\r\n\r\n    // setTimeout(()=>{\r\n    //     setState({\r\n    //         data:[1,2,3,4,5,6,7],\r\n    //         loading:false\r\n    //     })\r\n    // },3000);\r\n    return state; //{data:[], loading: true;}\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    // para agregar más elementos con el botón no se puede teniendo el const por eso se usara un hook\r\n    // const categories= ['one punch', 'Samurai X', 'Naruto'];\r\n\r\n    const [categories, setCategories]= useState(['Hospital Playlist']);\r\n\r\n    // const handleAdd=()=>{\r\n    //     // esta funcion tiene que agregar un nuevo elemento en el arreglo al dar click en \"agregar\"\r\n    //     // se utilizara el setCategories para establecerlo y así cambiarlo\r\n    //     // react va a renderizar el componente y así realizara los cambios\r\n        \r\n    //     // una manera es usando el spread-----\r\n    //     // setCategories([...categories, 'Boruto']);\r\n\r\n    //     // otra manera es regresando un callback-------\r\n    //     // setCategories(cats=>[...cats, 'boruto']);\r\n    //     // el primer valor es el estado anterior y luego el nuevo estado, no sera un nuevo arreglo con valores anteriores\r\n    // }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GiftExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories}/> \r\n            <hr></hr>\r\n            \r\n           {/* como mostrarlo dentro de una lista  los categories*/}\r\n           <ol>\r\n                {\r\n                    categories.map( category  => \r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}